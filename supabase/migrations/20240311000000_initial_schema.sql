-- Enable RLS (Row Level Security)
alter table public.stores enable row level security;
alter table public.products enable row level security;
alter table public.price_history enable row level security;
alter table public.shopping_lists enable row level security;
alter table public.shopping_list_items enable row level security;

-- Create tables
create table public.stores (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  name text not null,
  user_id uuid references auth.users not null
);

create table public.products (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  name text not null,
  price decimal(10,2) not null,
  store_id bigint references public.stores not null,
  barcode text,
  image_url text,
  user_id uuid references auth.users not null,
  purchase_count integer default 0,
  in_list BOOLEAN DEFAULT FALSE,
  quantity INTEGER DEFAULT 0
);

create table public.price_history (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  product_id bigint references public.products not null,
  price decimal(10,2) not null,
  user_id uuid references auth.users not null
);

create table public.shopping_lists (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  store_id bigint references public.stores not null,
  total decimal(10,2) not null,
  week_number integer not null,
  user_id uuid references auth.users not null
);

create table public.shopping_list_items (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  shopping_list_id bigint references public.shopping_lists not null,
  product_id bigint references public.products not null,
  quantity integer not null,
  price decimal(10,2) not null,
  user_id uuid references auth.users not null
);

-- Create policies
create policy "Users can view their own stores"
  on stores for select
  using ( auth.uid() = user_id );

create policy "Users can insert their own stores"
  on stores for insert
  with check ( auth.uid() = user_id );

create policy "Users can update their own stores"
  on stores for update
  using ( auth.uid() = user_id );

create policy "Users can delete their own stores"
  on stores for delete
  using ( auth.uid() = user_id );

create policy "Users can view their own products"
  on products for select
  using ( auth.uid() = user_id );

create policy "Users can insert their own products"
  on products for insert
  with check ( auth.uid() = user_id );

create policy "Users can update their own products"
  on products for update
  using ( auth.uid() = user_id );

create policy "Users can delete their own products"
  on products for delete
  using ( auth.uid() = user_id );

create policy "Users can view their own price history"
  on price_history for select
  using ( auth.uid() = user_id );

create policy "Users can insert their own price history"
  on price_history for insert
  with check ( auth.uid() = user_id );

create policy "Users can view their own shopping lists"
  on shopping_lists for select
  using ( auth.uid() = user_id );

create policy "Users can insert their own shopping lists"
  on shopping_lists for insert
  with check ( auth.uid() = user_id );

create policy "Users can delete their own shopping lists"
  on shopping_lists for delete
  using ( auth.uid() = user_id );

create policy "Users can view their own shopping list items"
  on shopping_list_items for select
  using ( auth.uid() = user_id );

create policy "Users can insert their own shopping list items"
  on shopping_list_items for insert
  with check ( auth.uid() = user_id );

create policy "Users can delete their own shopping list items"
  on shopping_list_items for delete
  using ( auth.uid() = user_id );